<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gargantua</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-26T06:23:26.089Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sunyf</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zookeeper快速上手</title>
    <link href="http://yoursite.com/2019/12/22/zookeeper%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2019/12/22/zookeeper%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2019-12-22T14:52:42.000Z</published>
    <updated>2019-12-26T06:23:26.089Z</updated>
    
    <content type="html"><![CDATA[<h4 id="C-S模式建立"><a href="#C-S模式建立" class="headerlink" title="C/S模式建立"></a>C/S模式建立</h4><p>client端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure><p>开启客户端后可以进行之后操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -R /</span><br></pre></td></tr></table></figure><p>增加、删除、改变节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [路径]/delete [路径]/<span class="built_in">set</span> [路径] [值]</span><br></pre></td></tr></table></figure><h4 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> ruok | nc localhost 2181</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/514710/1575941721925-49c49ed2-964b-407c-8b04-9cb2448d607c.png" alt="四字命令合集"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;C-S模式建立&quot;&gt;&lt;a href=&quot;#C-S模式建立&quot; class=&quot;headerlink&quot; title=&quot;C/S模式建立&quot;&gt;&lt;/a&gt;C/S模式建立&lt;/h4&gt;&lt;p&gt;client端&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
    
      <category term="tools" scheme="http://yoursite.com/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>parrot OS安装及初体验</title>
    <link href="http://yoursite.com/2019/12/21/parrot-OS%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/12/21/parrot-OS%E5%AE%89%E8%A3%85%E5%8F%8A%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2019-12-21T14:18:17.000Z</published>
    <updated>2019-12-22T02:11:21.298Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-制作启动盘"><a href="#1-制作启动盘" class="headerlink" title="1.制作启动盘"></a>1.制作启动盘</h3><p>​        并不需要制作U盘启动盘的工具，只需要用<code>linux</code>的一行命令和操作系统的<code>iso</code>文件就行。(理论上任何操作系统都可以)</p><p>注：U盘最好提前格式化为FAT32格式</p><a id="more"></a><h4 id="1-首先确定U盘路径"><a href="#1-首先确定U盘路径" class="headerlink" title="(1)首先确定U盘路径"></a>(1)首先确定U盘路径</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p>命令作用是显示所有存储设备路径</p><h4 id="2-umount目标U盘"><a href="#2-umount目标U盘" class="headerlink" title="(2)umount目标U盘"></a>(2)<code>umount</code>目标U盘</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo umount /dev/sda*</span><br></pre></td></tr></table></figure><p>这里<code>sda</code>是上面一步中目标U盘的路径，<code>sda*</code>是将其下所有分区都<code>umount</code></p><h4 id="3-dd命令制作启动盘"><a href="#3-dd命令制作启动盘" class="headerlink" title="(3)dd命令制作启动盘"></a>(3)<code>dd</code>命令制作启动盘</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd <span class="keyword">if</span>=*/Parrot-security-4.7_x64.iso of=/dev/sdb bs=4M</span><br></pre></td></tr></table></figure><pre><code>其中if是`input file`(放置iso文件的位置)，of是`output file`(启动盘的磁盘位置)，`bs=4M` 是将数据块大小设为4M，每个数据块只能存一个文件的数据，可以缺省。</code></pre><p>Warning：使用 DD 命令制作启动盘将会占用整个U盘的空间</p><h3 id="2-系统安装"><a href="#2-系统安装" class="headerlink" title="2.系统安装"></a>2.系统安装</h3><p>(1)进入安装页面后选择<strong>install</strong>就行，第一个模式是”Live Mode”启动模式，这样也是可以直接启动的，不需要经过安装步骤，可以先预览一下此系统是怎么样的。</p><p>(2)为了安装方便，我们选择图形界面，只需要选择<strong>Install with GTK GUI</strong>，再回车。</p><p>(3)到了这一步后，选择语言，只需要选择<strong>English</strong>。尽量不要选择中文，因为有时候翻译不准或者有的没有翻译，想搞技术英语是必须过关的，再点击<strong>Continue</strong>。</p><p>(4)选择你的地区<strong>China</strong>，再点击<strong>Continue</strong>。</p><p>(5)选择键盘布局时也选择英语的就行，使用起来不会出现问题。</p><p>(6)设置<strong>管理员</strong>用户名和密码，密码一定要记住。</p><p>(7)设置<strong>普通用户账号</strong>新用户的<strong>全名</strong>、<strong>用户名</strong>和<strong>密码</strong>。</p><p>(8)磁盘分区，选择<strong>向导-使用整个磁盘</strong>(因为我这台电脑只装这一个系统)。</p><p>(9)<strong>分区方案</strong>，我这为了快速，就直接选择<strong>将所有文件放在同一分区中（推荐新手使用）</strong>。</p><p>(10)<strong>结束分区设定并将修改写入磁盘</strong>。</p><p>(11)您是否想返回分区菜单？<strong>否</strong>；将改动写入磁盘吗？<strong>是</strong>。安装结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-制作启动盘&quot;&gt;&lt;a href=&quot;#1-制作启动盘&quot; class=&quot;headerlink&quot; title=&quot;1.制作启动盘&quot;&gt;&lt;/a&gt;1.制作启动盘&lt;/h3&gt;&lt;p&gt;​        并不需要制作U盘启动盘的工具，只需要用&lt;code&gt;linux&lt;/code&gt;的一行命令和操作系统的&lt;code&gt;iso&lt;/code&gt;文件就行。(理论上任何操作系统都可以)&lt;/p&gt;
&lt;p&gt;注：U盘最好提前格式化为FAT32格式&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="hacker" scheme="http://yoursite.com/tags/hacker/"/>
    
  </entry>
  
  <entry>
    <title>OVS交换机连接多控制器</title>
    <link href="http://yoursite.com/2019/12/20/OVS%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%BF%9E%E6%8E%A5%E5%A4%9A%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2019/12/20/OVS%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%BF%9E%E6%8E%A5%E5%A4%9A%E6%8E%A7%E5%88%B6%E5%99%A8/</id>
    <published>2019-12-20T07:09:46.000Z</published>
    <updated>2019-12-21T12:18:49.678Z</updated>
    
    <content type="html"><![CDATA[<p>为网桥端口增加ip:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-port br0 p1</span><br><span class="line">ip addr add 192.168.3.123/24 dev p1</span><br></pre></td></tr></table></figure><a id="more"></a><p>为网桥添加多个控制器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl set-controller b1(网桥名) tcp:192.168.1.110:6653 tcp:192.168.1.110:6654</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为网桥端口增加ip:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ovs-vsctl add-port br0 p1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ip addr add 192.168.3.123/24 dev p1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="SDN" scheme="http://yoursite.com/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建</title>
    <link href="http://yoursite.com/2019/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/"/>
    <id>http://yoursite.com/2019/12/19/hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/</id>
    <published>2019-12-19T14:43:52.000Z</published>
    <updated>2020-01-18T05:42:54.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、首先要先建立好基本的单终端博客系统"><a href="#一、首先要先建立好基本的单终端博客系统" class="headerlink" title="一、首先要先建立好基本的单终端博客系统"></a>一、首先要先建立好基本的单终端博客系统</h2><h3 id="1-这个是win10-hexo-github的搭建方法"><a href="#1-这个是win10-hexo-github的搭建方法" class="headerlink" title="1.这个是win10+hexo+github的搭建方法"></a>1.这个是win10+hexo+github的搭建方法</h3><p>​        参考<a href="https://segmentfault.com/a/1190000020382983" target="_blank" rel="noopener">链接</a></p><p>​        基本操作比较简单，本文也不再赘述。</p><p>​        如果出现难以解决的问题：比如博客本地根目录下的_config.yml文件找不到了的时候，就可以直接把博客根目录删除，从头操作</p><p><strong>坑1：</strong>注意想用自定义theme最好不要从github上直接克隆下来，而是以压缩包形式下载到对应theme文件夹后再解压。这对之后的多终端同步有好处</p><a id="more"></a><h3 id="2-另一个（或者之后的其他）终端需要提前配一下环境"><a href="#2-另一个（或者之后的其他）终端需要提前配一下环境" class="headerlink" title="2.另一个（或者之后的其他）终端需要提前配一下环境"></a>2.另一个（或者之后的其他）终端需要提前配一下环境</h3><p>​        参考<a href="[https://oceandlnu.github.io/2017/03/06/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5[%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C]/](https://oceandlnu.github.io/2017/03/06/GitHub+Hexo博客多终端同步[准备工作]/)">链接</a></p><p>​        主要就是git+node.js+hexo</p><h2 id="二、多终端部署"><a href="#二、多终端部署" class="headerlink" title="二、多终端部署"></a>二、多终端部署</h2><p>​        参考<a href="[https://oceandlnu.github.io/2017/04/05/GitHub+Hexo%E5%8D%9A%E5%AE%A2%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5/](https://oceandlnu.github.io/2017/04/05/GitHub+Hexo博客多终端同步/)">链接</a></p><p><strong>坑2：</strong>注意所有的clone或add等与github网址有关的操作，都要用https那个版本的网址（在github上给出的）</p><h3 id="0-基础部署"><a href="#0-基础部署" class="headerlink" title="0.基础部署"></a>0.基础部署</h3><p>​        首先是本文中的一、2.中的环境要部署好，接下来就是关键的对接操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init  <span class="comment">#在blog根目录下初始化本地仓库</span></span><br><span class="line">git add .  <span class="comment">#将目录下的所有文件添加到本地仓库</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"Blog Source Hexo"</span> <span class="comment">#提示本次commit主要目的</span></span><br><span class="line">git branch hexo  <span class="comment">#新建hexo分支</span></span><br><span class="line">git checkout hexo  <span class="comment">#切换到hexo分支上</span></span><br><span class="line">git remote add origin https://github.com/LoganSun720/LoganSun720.github.io.git <span class="comment">#将本地与Github项目对接</span></span><br><span class="line">git push origin hexo  <span class="comment">#push到Github项目的hexo分支上</span></span><br></pre></td></tr></table></figure><p>​        这样github就会多出一个名为hexo的分支</p><h3 id="1-git-clone-pull"><a href="#1-git-clone-pull" class="headerlink" title="1.git clone/pull"></a>1.git clone/pull</h3><p>​        第一次在新终端上操作时需要将hexo上的东西都clone下来</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> hexo https://github.com/LoganSun720/LoganSun720.github.io.git</span><br><span class="line">cd logansun720.github.io  <span class="comment">#切换到刚刚clone的文件夹内</span></span><br><span class="line">npm install  <span class="comment">#注意，这里一定要切换到刚刚clone的文件夹内执行，安装必要的所需组件，不用再hexo init</span></span><br></pre></td></tr></table></figure><p><strong>注：之后再用这台终端写文章时就用<code>git pull</code>就好</strong></p><p>​        每次写之前都要先在blog根文件夹下的hexo分支进行pull操作，将远端hexo分支下的内容更新至本地。不然新一次更改上传的时候会把之前在别的终端上进行上传的更改覆盖。</p><p><strong>坑：</strong>可能会有如下报错：</p><blockquote><p>gitThere is no tracking information for the current branch.</p><p>Please specify which branch you want to merge with.</p><p>See git-pull(1) for details</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br></pre></td></tr></table></figure><p>If you wish to set tracking information for this branch you can do so with:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -<span class="literal">-set</span><span class="literal">-upstream</span><span class="literal">-to</span>=origin/&lt;branch&gt; hexo</span><br></pre></td></tr></table></figure></blockquote><p><strong>解决：</strong> 根据提示输入：</p><p>git branch –set-upstream-to=origin/远程分支的名字(我的是hexo) 本地分支的名字(我的是hexo) ·</p><h3 id="2-hexo-new-post"><a href="#2-hexo-new-post" class="headerlink" title="2.hexo new post"></a>2.hexo new post</h3><p>​        编辑文章时最好用<code>hexo new post &quot;文章名&quot;</code>，但是写文章时可以直接在blog根文件夹下的<code>source/_post/</code>下用md格式编辑即可</p><h3 id="3-上传"><a href="#3-上传" class="headerlink" title="3.上传"></a>3.上传</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add source  <span class="comment">#经测试每次只要更新source中的文件到Github中即可，因为只是新建了一篇新博客</span></span><br><span class="line">git commit <span class="literal">-m</span> <span class="string">"XX"</span>  <span class="comment">#提醒之后的自己这次更改是什么</span></span><br><span class="line">git push origin hexo  <span class="comment">#推送到远程仓库，更新hexo分支</span></span><br></pre></td></tr></table></figure><h4 id="附：当然为了使博客生效-每次可以先用hexo三连来预览，并用hexo-d来部署，最后在用-二-中的后三步来更新到github"><a href="#附：当然为了使博客生效-每次可以先用hexo三连来预览，并用hexo-d来部署，最后在用-二-中的后三步来更新到github" class="headerlink" title="附：当然为了使博客生效 每次可以先用hexo三连来预览，并用hexo d来部署，最后在用(二)中的后三步来更新到github"></a>附：当然为了使博客生效 每次可以先用hexo三连来预览，并用<code>hexo d</code>来部署，最后在用(二)中的后三步来更新到github</h4><h2 id="三、博客内图片处理"><a href="#三、博客内图片处理" class="headerlink" title="三、博客内图片处理"></a>三、博客内图片处理</h2><p>​        当向文章中添加图片时，如果图片来源于网络，那么还比较好办，直接引用那个链接即可，不过也有问题，那就是如果那个链接挂了那么你的图片也就无法显示。另外如果你的图片来源于本地，那么更麻烦了。一种做法是使用第三方服务器，比如七牛，当需要插入图片时，先把图片上传到七牛的服务器然后再使用，我觉得很麻烦。这里选择另外一种方法。</p><p>首先修改 <code>_config.yml</code> (在站点目录下) 中 <code>post_asset_folder</code> 字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_asset_folder: false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>当设置该字段为 <code>true</code> 时，在建立文件时，Hexo 会自动建立一个与文章同名的文件夹，你就可以把与该文章相关的所有资源都放到那个文件夹，这么一来，你就可以很方便的使用资源。例如，文章 <code>post</code> 需要插入图片 <code>test.png</code> 时，就可以使用  。</p><p>问题是这样在本地显示没有问题，但是发布之后就无法显示，使用 <code>hexo-asset-image</code> 插件来解决。</p><p>在博客根目录右击打开 <code>git bash</code> ，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>重新生成之后就可以在你自己的网页上正常显示了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、首先要先建立好基本的单终端博客系统&quot;&gt;&lt;a href=&quot;#一、首先要先建立好基本的单终端博客系统&quot; class=&quot;headerlink&quot; title=&quot;一、首先要先建立好基本的单终端博客系统&quot;&gt;&lt;/a&gt;一、首先要先建立好基本的单终端博客系统&lt;/h2&gt;&lt;h3 id=&quot;1-这个是win10-hexo-github的搭建方法&quot;&gt;&lt;a href=&quot;#1-这个是win10-hexo-github的搭建方法&quot; class=&quot;headerlink&quot; title=&quot;1.这个是win10+hexo+github的搭建方法&quot;&gt;&lt;/a&gt;1.这个是win10+hexo+github的搭建方法&lt;/h3&gt;&lt;p&gt;​        参考&lt;a href=&quot;https://segmentfault.com/a/1190000020382983&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​        基本操作比较简单，本文也不再赘述。&lt;/p&gt;
&lt;p&gt;​        如果出现难以解决的问题：比如博客本地根目录下的_config.yml文件找不到了的时候，就可以直接把博客根目录删除，从头操作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;坑1：&lt;/strong&gt;注意想用自定义theme最好不要从github上直接克隆下来，而是以压缩包形式下载到对应theme文件夹后再解压。这对之后的多终端同步有好处&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/19/hello-world/"/>
    <id>http://yoursite.com/2019/12/19/hello-world/</id>
    <published>2019-12-19T13:45:24.961Z</published>
    <updated>2019-12-19T14:04:34.878Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>基于zookeeper的Ryu多控制器实现过程全纪录</title>
    <link href="http://yoursite.com/2019/12/19/%E5%A4%9A%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%9E%E7%8E%B0-zookeeper+ryu/"/>
    <id>http://yoursite.com/2019/12/19/%E5%A4%9A%E6%8E%A7%E5%88%B6%E5%99%A8%E5%AE%9E%E7%8E%B0-zookeeper+ryu/</id>
    <published>2019-12-18T16:00:00.000Z</published>
    <updated>2020-01-18T05:40:21.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础分布式锁"><a href="#基础分布式锁" class="headerlink" title="基础分布式锁"></a>基础分布式锁</h2><p>通过zookeeper的分布式锁来实现一个交换机只会被一个控制器所控制，参考康奈尔大学的一个<a href="https://github.com/coscin/coscin-app-ryu.git" target="_blank" rel="noopener">项目</a></p><a id="more"></a><p><strong>问题：</strong>没有连接交换机的时候，控制器就会有交换机的提示，显示连接了三个交换机，且地址是本地(127.0.0.1)</p><p>经过验证，自带的<code>ryu-manager --verbose</code>也出现这个问题，发现是Mininet进程在后台运行(即使是电脑重启它也会跟随系统启动)。</p><p><strong>解决：</strong>用<code>sudo mn -c</code>命令即可将后台的Mininet进程clean and exit</p><h4 id="在服务器上开启zookeeper服务器"><a href="#在服务器上开启zookeeper服务器" class="headerlink" title="在服务器上开启zookeeper服务器"></a>在服务器上开启zookeeper服务器</h4><p>实验阶段用常开的台式机中的Ubuntu虚拟机部署<code>standalone</code>模式下的服务器：(zookeeper安装教程不再赘述)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zkServer.sh start-foreground ./conf/zoo.cfg</span><br></pre></td></tr></table></figure><p><code>start-foreground</code>是将启动日志在屏幕上打出来，在<code>./conf/zoo.cfg</code>(下载安装zookeeper的文件夹下的配置文件)中将最重要的<code>dataDir</code>、<code>clientPort</code>设置好(如果要用quorum模式，则需要在最下面添加server地址和端口)</p><p><em>注意：</em>如果出现地址端口已经被占用问题可以用一下命令修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -ap | grep 2181</span><br></pre></td></tr></table></figure><p>此命令检查出正在使用2181端口的进程，进而终止</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">kill</span> -9 PID_num</span><br></pre></td></tr></table></figure><h4 id="控制器启动："><a href="#控制器启动：" class="headerlink" title="控制器启动："></a>控制器启动：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ryu-manager --verbose -ofp-tcp-listen-port 6653 ./coscin_app.py</span><br></pre></td></tr></table></figure><p><strong>问题1：</strong>出现错误提示：<code>ImportError：Import by filename is not supported.</code>但是用pycharm来debug却没有问题。</p><p><em>原因：</em>只能在ryu内部添加<code>coscin_app.py</code>等一系列脚本并运行添加后的整个ryu才行，因为在<code>coscin_app.py</code>程序中的<code>import</code>格式是相对于ryu内部的格式。  </p><p><strong>解决：</strong>只需要更改<code>coscin_app.py</code>内部<code>import</code>方式即可。</p><p><strong>问题2：</strong>系统路径下的<code>ryu-manager</code>总是用python2.7</p><p><strong>解决：</strong>通过<code>ls /usr/bin/python*</code>来查看系统可用的python版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 2</span><br></pre></td></tr></table></figure><p>此时再输入<code>python --version</code>检验可知版本应该已经切换到python3了，如果想要重新换回python则用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure><h4 id="openflow1-3中对于多控制器的描述"><a href="#openflow1-3中对于多控制器的描述" class="headerlink" title="openflow1.3中对于多控制器的描述"></a>openflow1.3中对于多控制器的描述</h4><p>​        交换机可以与单个控制器建立通信，或者可以与多个控制器建立通信。 拥有多个控制器可以提高可靠性，因为如果一个控制器或控制器连接失败，交换机可以继续在OpenFlow模式下运行。 控制器之间的切换完全由控制器本身管理，从而可以从故障中快速恢复，并实现控制器负载平衡。 控制器之间通过本说明书范围之外的机制来协调交换机之间的管理，并且多控制器功能的目的仅仅是帮助同步由控制器执行的控制器切换。 多控制器功能仅解决控制器故障转移和负载平衡问题，而不能解决无法在OpenFlow交换协议之外完成的虚拟化问题。</p><p>​        启动OpenFlow操作时，交换机必须连接到配置了它的所有控制器，并尝试同时保持与所有控制器的连接。许多控制器可以将controllerto-switch命令发送到交换机，与这些命令相关的答复或错误消息必须仅在与该命令关联的控制器连接上发送。可能需要将异步消息发送到多个控制器，对于每个合格的OpenFlow通道，该消息将被复制，并且在相应的控制器连接允许时，将发送每个消息。</p><p>​        控制器的默认角色是OFPCR_ROLE_EQUAL。在此角色中，控制器具有对交换机的完全访问权限，并且与处于同一角色的其他控制器相同。默认情况下，控制器会接收所有交换机异步消息（例如，输入数据包，删除流量）。控制器可以发送控制器到交换机的命令来修改交换机的状态。交换机在控制器之间不进行任何仲裁或资源共享。</p><p>​        控制器可以请求将其角色更改为OFPCR_ROLE_SLAVE。在此角色下，控制器对交换机具有只读访问权限。默认情况下，除了端口状态消息外，控制器不接收交换机异步消息。控制器无法执行所有发送数据包或修改交换机状态的控制器到交换机命令。例如，必须拒绝OFPT_PACKET_OUT，OFPT_FLOW_MOD，OFPT_GROUP_MOD，OFPT_PORT_MOD，OFPT_TABLE_MOD请求以及具有非空主体的OFPMP_TABLE_FEATURES的多部分请求。</p><p>​        当控制器有发出上述消息时，交换机必须使用OFPT_BAD_REQUEST的类型字段（OFPBRC_IS_SLAVE的代码字段）答复OFPT_ERROR消息。 其他仅查询数据的控制器到交换机的消息，例如OFPT_ROLE_REQUEST，OFPT_SET_ASYNC和OFPT_MULTIPART_REQUEST应该正常处理。</p><p>​        控制器可以请求将其角色更改为OFPCR_ROLE_MASTER。该角色类似于OFPCR_ROLE_EQUAL，并且具有对交换机的完全访问权限，不同之处在于，该交换机确保它是该角色中的唯一控制器。当控制器将角色更改为OFPCR_ROLE_MASTER时，交换机会将角色为OFPCR_ROLE_MASTER的当前控制器更改为角色OFPCR_ROLE_SLAVE，但不影响角色为OFPCR_ROLE_EQUAL的控制器。当交换机执行此类角色更改时，不会向更改其角色的控制器生成任何消息（在大多数情况下，该控制器不再可访问）。每个控制器可以发送OFPT_ROLE_REQUEST消息以将其角色传达给交换机（请参阅7.3.9），并且交换机必须记住每个控制器连接的角色。如果消息中的generation_id是最新的，则控制器可以随时更改角色（请参见下文）。角色请求消息提供了一种轻量级的机制来帮助控制器主选举过程，控制器配置其角色，并且通常仍需要在它们之间进行协调。交换机无法自行更改控制器的状态，始终会根据其中一个控制器的请求更改控制器的状态。任何从控制器或相等控制器都可以选举自己为主。交换机可以同时连接到处于相等状态的多个控制器，处于从属状态的多个控制器以及处于主状态的一个控制器。处于“主”状态（如果有）的控制器和处于“相等”状态的所有控制器都可以完全更改交换机状态，没有任何机制可以在这些控制器之间强制进行交换机分区。如果具有“主”角色的控制器必须是唯一能够在交换机上进行更改的控制器，则任何控制器都不应处于“相等”状态，而所有其他控制器都应处于“从属”状态。控制器还可以控制通过其OpenFlow通道发送哪些类型的交换机异步消息，并更改上述默认值。这是通过“异步配置”消息（请参见6.1.1）完成的，列出了需要为特定OpenFlow通道启用或过滤（参见7.3.10）的每种消息类型的所有原因。使用此功能，不同的控制器可以接收不同的通知，处于主模式的控制器可以有选择地禁用它不关心的通知，而处于从模式的控制器可以启用它想要监视的通知。</p><h4 id="将多控制器锁模块与信息备份模块结合"><a href="#将多控制器锁模块与信息备份模块结合" class="headerlink" title="将多控制器锁模块与信息备份模块结合"></a>将多控制器锁模块与信息备份模块结合</h4><p><em>需要同步的信息：拓扑信息，包含交换机、主控制器、链路以及备份控制器等信息</em></p><p><strong><em>1.将有变动的拓扑同步至ryu控制器</em></strong></p><p><strong>问题1：</strong>topology下面的数据出现变化时没有反应</p><p>原因：没有通过kazoo监控修改节点事件</p><p>解决：<code>@DataWatch(client=zk_client.zkc, path=zk_path)</code>中不要设置返回函数，并且在watcher函数中监听节点和节点值后面加上不断循环</p><p><strong>问题2：</strong>在主模块中不能只是单纯调用子模块来实现目标</p><p>原因：如果子模块中有循环获取最新状态的操作，则不会回到主模块中。实际上，我们需要的是运行状态时子模块的实例，而<code>import</code>无法做到这一点。</p><p>解决：由于目前数据更新和下载模块不属于Ryu模块，所以不能用Ryu模块交流办法，只能将非死循环部分留下，死循环部分拿到主程序</p><p><strong>问题3：</strong><code>assert app.name not in SERVICE_BRICKS AssertionError</code></p><p>解决：<code>_CONTEXTS</code>放在了类的定义内部，导致主函数<code>coscin_app.py</code>读不到App<code>network_awareness_ori</code>的注册信息，只需要移至累的定义最外面即可</p><p><strong>问题4：</strong><code>oslo_config.cfg.NoSuchOptError: no such option k_paths in group [DEFAULT]</code></p><p>原因：李呈大神的代码中对整体Ryu(就是pip的python包)都进行了更改</p><p><strong>问题5：</strong><code>OFPErrorMsg received: type=0x01 code=0x0a message=......</code></p><p>解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enum ofp_error_type</span></span><br><span class="line">OFPET_BAD_REQUEST = <span class="number">1</span>               <span class="comment"># Request was not understood.</span></span><br><span class="line">OFPBRC_IS_SLAVE = <span class="number">10</span>                    <span class="comment"># Denied because controller is slave.</span></span><br></pre></td></tr></table></figure><p><strong>问题6：</strong>pip安装没有<code>mininet</code></p><p>解决：把<code>mininet</code>下载下来的源码文件夹放到Ubuntu的<code>/usr/local/lib/python3.6/dist-packages</code>文件夹下</p><p><strong><em>2.</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础分布式锁&quot;&gt;&lt;a href=&quot;#基础分布式锁&quot; class=&quot;headerlink&quot; title=&quot;基础分布式锁&quot;&gt;&lt;/a&gt;基础分布式锁&lt;/h2&gt;&lt;p&gt;通过zookeeper的分布式锁来实现一个交换机只会被一个控制器所控制，参考康奈尔大学的一个&lt;a href=&quot;https://github.com/coscin/coscin-app-ryu.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;项目&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="SDN" scheme="http://yoursite.com/tags/SDN/"/>
    
  </entry>
  
</feed>
